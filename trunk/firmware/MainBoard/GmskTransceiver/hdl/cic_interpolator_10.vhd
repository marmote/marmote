-- -------------------------------------------------------------
--
-- Module: cic_interpolator_10
--
-- Generated by MATLAB(R) 7.14 and the Filter Design HDL Coder 2.9.1.
--
-- Generated on: 2013-02-11 13:19:49
--
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- ResetInputPort: rst
-- Name: cic_interpolator_10
-- TestBenchName: Hcic_tb
-- TestBenchStimulus: step ramp chirp noise 

-- Filter Specifications:
--
-- Sampling Frequency   : N/A (normalized frequency)
-- Response             : CIC
-- Specification        : Fp,Ast
-- Multirate Type       : Interpolator
-- Interpolation Factor : 10
-- Differential Delay   : 1
-- Passband Edge        : 0.01
-- Stopband Atten.      : 60 dB
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure        : Cascaded Integrator-Comb Interpolator
-- Interpolation Factor    : 10
-- Differential Delay      : 1
-- Number of Sections      : 3
-- Stable                  : Yes
-- Linear Phase            : Yes (Type 2)
--
-- Input                   : s11,9
-- Output                  : s10,1
-- Filter Internals        : Minimum Word Lengths
--   Comb Section 1        : s13,9
--   Comb Section 2        : s16,9
--   Comb Section 3        : s18,9
--   Integrator Section 1  : s12,9
--   Integrator Section 2  : s13,9
--   Integrator Section 3  : s13,9
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;
ENTITY cic_interpolator_10 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         rst                             :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(10 DOWNTO 0); -- sfix11_En9
         filter_out                      :   OUT   std_logic_vector(9 DOWNTO 0); -- sfix10_En1
         ce_out                          :   OUT   std_logic  
         );

END cic_interpolator_10;


----------------------------------------------------------------
--Module Architecture: cic_interpolator_10
----------------------------------------------------------------
ARCHITECTURE rtl OF cic_interpolator_10 IS
  -- Local Functions
  -- Type Definitions
  -- Constants
  CONSTANT zeroconst                      : signed(12 DOWNTO 0) := to_signed(0, 13); -- sfix13_En9
  -- Signals
  SIGNAL cur_count                        : unsigned(3 DOWNTO 0); -- ufix4
  SIGNAL phase_0                          : std_logic; -- boolean
  --   
  SIGNAL input_register                   : signed(10 DOWNTO 0); -- sfix11_En9
  --   -- Section 1 Signals 
  SIGNAL section_in1                      : signed(10 DOWNTO 0); -- sfix11_En9
  SIGNAL section_cast1                    : signed(11 DOWNTO 0); -- sfix12_En9
  SIGNAL diff1                            : signed(11 DOWNTO 0); -- sfix12_En9
  SIGNAL section_out1                     : signed(11 DOWNTO 0); -- sfix12_En9
  SIGNAL sub_cast                         : signed(11 DOWNTO 0); -- sfix12_En9
  SIGNAL sub_cast_1                       : signed(11 DOWNTO 0); -- sfix12_En9
  SIGNAL sub_temp                         : signed(12 DOWNTO 0); -- sfix13_En9
  --   -- Section 2 Signals 
  SIGNAL section_in2                      : signed(11 DOWNTO 0); -- sfix12_En9
  SIGNAL section_cast2                    : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL diff2                            : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL section_out2                     : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL sub_cast_2                       : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL sub_cast_3                       : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL sub_temp_1                       : signed(13 DOWNTO 0); -- sfix14_En9
  --   -- Section 3 Signals 
  SIGNAL section_in3                      : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL diff3                            : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL section_out3                     : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL sub_cast_4                       : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL sub_cast_5                       : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL sub_temp_2                       : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL upsampling                       : signed(12 DOWNTO 0); -- sfix13_En9
  --   -- Section 4 Signals 
  SIGNAL section_in4                      : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL sum1                             : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL section_out4                     : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL add_cast                         : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL add_cast_1                       : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL add_temp                         : signed(13 DOWNTO 0); -- sfix14_En9
  --   -- Section 5 Signals 
  SIGNAL section_in5                      : signed(12 DOWNTO 0); -- sfix13_En9
  SIGNAL section_cast5                    : signed(15 DOWNTO 0); -- sfix16_En9
  SIGNAL sum2                             : signed(15 DOWNTO 0); -- sfix16_En9
  SIGNAL section_out5                     : signed(15 DOWNTO 0); -- sfix16_En9
  SIGNAL add_cast_2                       : signed(15 DOWNTO 0); -- sfix16_En9
  SIGNAL add_cast_3                       : signed(15 DOWNTO 0); -- sfix16_En9
  SIGNAL add_temp_1                       : signed(16 DOWNTO 0); -- sfix17_En9
  --   -- Section 6 Signals 
  SIGNAL section_in6                      : signed(15 DOWNTO 0); -- sfix16_En9
  SIGNAL section_cast6                    : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL sum3                             : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL section_out6                     : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_cast_4                       : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_cast_5                       : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_2                       : signed(18 DOWNTO 0); -- sfix19_En9
  SIGNAL output_typeconvert               : signed(9 DOWNTO 0); -- sfix10_En1
  --   
  SIGNAL output_register                  : signed(9 DOWNTO 0); -- sfix10_En1


BEGIN

  -- Block Statements
  --   ------------------ CE Output Generation ------------------

  ce_output : PROCESS (clk, rst)
  BEGIN
    IF rst = '1' THEN
      cur_count <= to_unsigned(0, 4);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count = to_unsigned(9, 4) THEN
          cur_count <= to_unsigned(0, 4);
        ELSE
          cur_count <= cur_count + 1;
        END IF;
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 4) AND clk_enable = '1' ELSE '0';

  --   ------------------ Input Register ------------------

  input_reg_process : PROCESS (clk, rst)
  BEGIN
    IF rst = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  --   ------------------ Section # 1 : Comb ------------------

  section_in1 <= input_register;

  section_cast1 <= resize(section_in1, 12);

  sub_cast <= section_cast1;
  sub_cast_1 <= diff1;
  sub_temp <= resize(sub_cast, 13) - resize(sub_cast_1, 13);
  section_out1 <= sub_temp(11 DOWNTO 0);

  comb_delay_section1 : PROCESS (clk, rst)
  BEGIN
    IF rst = '1' THEN
      diff1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        diff1 <= section_cast1;
      END IF;
    END IF; 
  END PROCESS comb_delay_section1;

  --   ------------------ Section # 2 : Comb ------------------

  section_in2 <= section_out1;

  section_cast2 <= resize(section_in2, 13);

  sub_cast_2 <= section_cast2;
  sub_cast_3 <= diff2;
  sub_temp_1 <= resize(sub_cast_2, 14) - resize(sub_cast_3, 14);
  section_out2 <= sub_temp_1(12 DOWNTO 0);

  comb_delay_section2 : PROCESS (clk, rst)
  BEGIN
    IF rst = '1' THEN
      diff2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        diff2 <= section_cast2;
      END IF;
    END IF; 
  END PROCESS comb_delay_section2;

  --   ------------------ Section # 3 : Comb ------------------

  section_in3 <= section_out2;

  sub_cast_4 <= section_in3;
  sub_cast_5 <= diff3;
  sub_temp_2 <= resize(sub_cast_4, 14) - resize(sub_cast_5, 14);
  section_out3 <= sub_temp_2(12 DOWNTO 0);

  comb_delay_section3 : PROCESS (clk, rst)
  BEGIN
    IF rst = '1' THEN
      diff3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        diff3 <= section_in3;
      END IF;
    END IF; 
  END PROCESS comb_delay_section3;

  upsampling <= section_out3 WHEN ( phase_0 = '1' ) ELSE
                zeroconst;
  --   ------------------ Section # 4 : Integrator ------------------

  section_in4 <= upsampling;

  add_cast <= section_in4;
  add_cast_1 <= section_out4;
  add_temp <= resize(add_cast, 14) + resize(add_cast_1, 14);
  sum1 <= add_temp(12 DOWNTO 0);

  integrator_delay_section4 : PROCESS (clk, rst)
  BEGIN
    IF rst = '1' THEN
      section_out4 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out4 <= sum1;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section4;

  --   ------------------ Section # 5 : Integrator ------------------

  section_in5 <= section_out4;

  section_cast5 <= resize(section_in5, 16);

  add_cast_2 <= section_cast5;
  add_cast_3 <= section_out5;
  add_temp_1 <= resize(add_cast_2, 17) + resize(add_cast_3, 17);
  sum2 <= add_temp_1(15 DOWNTO 0);

  integrator_delay_section5 : PROCESS (clk, rst)
  BEGIN
    IF rst = '1' THEN
      section_out5 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out5 <= sum2;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section5;

  --   ------------------ Section # 6 : Integrator ------------------

  section_in6 <= section_out5;

  section_cast6 <= resize(section_in6, 18);

  add_cast_4 <= section_cast6;
  add_cast_5 <= section_out6;
  add_temp_2 <= resize(add_cast_4, 19) + resize(add_cast_5, 19);
  sum3 <= add_temp_2(17 DOWNTO 0);

  integrator_delay_section6 : PROCESS (clk, rst)
  BEGIN
    IF rst = '1' THEN
      section_out6 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out6 <= sum3;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section6;

  output_typeconvert <= section_out6(17 DOWNTO 8);

  --   ------------------ Output Register ------------------

  output_reg_process : PROCESS (clk, rst)
  BEGIN
    IF rst = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_reg_process;

  -- Assignment Statements
  ce_out <= phase_0;
  filter_out <= std_logic_vector(output_register);
END rtl;
